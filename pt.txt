Voici mon fichier asgi.py:

import os

from django.core.asgi import get_asgi_application
from channels.routing import ProtocolTypeRouter, URLRouter
from channels.security.websocket import AllowedHostsOriginValidator
from channels.auth import AuthMiddlewareStack
from django.urls import path
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'SoulQuest.settings')

django_asgi_app = get_asgi_application()

from messagerie import routing

application = ProtocolTypeRouter({
    "http": django_asgi_app,
    "websocket": AllowedHostsOriginValidator(
        AuthMiddlewareStack(
            URLRouter(
                routing.websocket_urlpatterns
            )
        )
    ),
})

--------------------------------------------



Voici le code SQL de création de ma base de données en MySQL:

-- Adminer 4.8.1 MySQL 8.2.0 dump
SET NAMES utf8;
SET time_zone = '+00:00';
SET foreign_key_checks = 0; 
SET sql_mode = 'NO_AUTO_VALUE_ON_ZERO';

DROP TABLE IF EXISTS `zz_users`;
CREATE TABLE `zz_users` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `email` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `pseudo` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `last_connect` datetime NOT NULL,
  `nom` varchar(255) DEFAULT NULL,
  `prenom` varchar(255) DEFAULT NULL,
  `birthday` date NOT NULL,
  `bio` mediumtext,
  `sex` enum('Homme','Femme','Non-Binaire','Je préfère ne pas dire') DEFAULT NULL,
  `plage` enum('1','2','3','4','5','6','7','8','9','10') DEFAULT NULL,
  `astre` enum('Bélier','Taureau','Gémeaux','Cancer','Lion','Vierge','Balance','Scorpion','Sagittaire','Capricorne','Verseau','Poissons') DEFAULT NULL,
  `religion` enum('Catholique','Chrétien','Juif','Bouddhiste','Mormon','Musulman','Orthodoxe','Protestant','Hindou','Athée','Chamanique','Spirituel','Autres') DEFAULT NULL,
  `longitude` DOUBLE PRECISION NOT NULL,
  `latitude` DOUBLE PRECISION NOT NULL,
  `city` VARCHAR(255) NOT NULL,
  `country` VARCHAR(255) NOT NULL,
  `hobby` json DEFAULT NULL,
  `pref` json DEFAULT NULL,
  `online` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`),
  UNIQUE KEY `pseudo` (`pseudo`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;

DROP TABLE IF EXISTS `zz_friendship`;
CREATE TABLE `zz_friendship` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `liker` int unsigned NOT NULL,
  `liked` int unsigned NOT NULL,
  `lik` int unsigned NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `liker` (`liker`,`liked`,`lik`),
  KEY `fk_f_medias` (`liked`),
  CONSTRAINT `fk_f_medias` FOREIGN KEY (`liked`) REFERENCES `zz_users` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `fk_f_users` FOREIGN KEY (`liker`) REFERENCES `zz_users` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;


DROP TABLE IF EXISTS `zz_discussions`;
CREATE TABLE `zz_discussions` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `last_message_id` int unsigned DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;


DROP TABLE IF EXISTS `zz_langages`;
CREATE TABLE `zz_langages` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;

INSERT INTO `zz_langages` (id, name) VALUES
(1, 'Afrikaans'),
(2, 'Albanais'),
(3, 'Amharique'),
(4, 'Anglais'),
(5, 'Arabe'),
(6, 'Arménien'),
(7, 'Aymara'),
(8, 'Azéri'),
(9, 'Bengali'),
(10, 'Birman'),
(11, 'Bosniaque'),
(12, 'Bulgare'),
(13, 'Catalan'),
(14, 'Chichewa'),
(15, 'Chinois (mandarin)'),
(16, 'Coréen'),
(17, 'Croate'),
(18, 'Danois'),
(19, 'Espagnol'),
(20, 'Estonien'),
(21, 'Finnois'),
(22, 'Français'),
(23, 'Géorgien'),
(24, 'Grec'),
(25, 'Hébreu'),
(26, 'Hindi'),
(27, 'Hongrois'),
(28, 'Indonésien'),
(29, 'Irlandais'),
(30, 'Islandais'),
(31, 'Italien'),
(32, 'Japonais'),
(33, 'Kazakh'),
(34, 'Kirghize'),
(35, 'Kiswahili'),
(36, 'Kurde'),
(37, 'Letton'),
(38, 'Lituanien'),
(39, 'Luxembourgeois'),
(40, 'Macédonien'),
(41, 'Malais'),
(42, 'Maltais'),
(43, 'Maori'),
(44, 'Mongol'),
(45, 'Népalais'),
(46, 'Norvégien'),
(47, 'Ourdou'),
(48, 'Ouzbek'),
(49, 'Pachtou'),
(50, 'Persan'),
(51, 'Polonais'),
(52, 'Portugais'),
(53, 'Quechua'),
(54, 'Roumain'),
(55, 'Russe'),
(56, 'Serbe'),
(57, 'Sesotho'),
(58, 'Singhalais'),
(59, 'Slovaque'),
(60, 'Slovène'),
(61, 'Suédois'),
(62, 'Tamoul'),
(63, 'Tchèque'),
(64, 'Télougou'),
(65, 'Thaï'),
(66, 'Tigrigna'),
(67, 'Turc'),
(68, 'Ukrainien'),
(69, 'Vietnamien'),
(70, 'Xhosa'),
(71, 'Yiddish'),
(72, 'Zoulou');

DROP TABLE IF EXISTS `zz_hobbys`;
CREATE TABLE `zz_hobbys` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;

INSERT INTO `zz_hobbys` (id, name) VALUES
(1, 'Sport'),
(2, 'Cuisine'),
(3, 'Jardinage'),
(4, 'Randonnée'),
(5, 'Pêche'),
(6, 'Musique'),
(7, 'Musculation'),
(8, 'Danse'),
(9, 'Camping'),
(10, 'Photographie'),
(11, 'Bourse'),
(12, 'Méditation'),
(13, 'Technologie'),
(14, 'Livres'),
(15, 'Politique'),
(16, 'Economie'),
(17, 'Diplomatie'),
(18, 'Mode'),
(19, 'Concert'),
(20, 'Voyage'),
(21, 'Bijoux'),
(22, 'Gaming'),
(23, 'Commerce'),
(24, 'Bricolage'),
(25, 'Langues'),
(26, 'Shopping'),
(27, 'Séries'),
(28, 'Films'),
(29, 'Documentaire'),
(30, 'Spiritualité'),
(31, 'Théatre'),
(32, 'Thé'),
(33, 'Comédie'),
(34, 'Astrologie'),
(35, 'Beer'),
(36, 'Vin'),
(37, 'Cigarette'),
(38, 'Automobile'),
(39, 'Crypto'),
(40, 'Surf'),
(41, 'Informatique');



DROP TABLE IF EXISTS `zz_medias`;
CREATE TABLE `zz_medias` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `path` varchar(255) NOT NULL,
  `type` enum('0','1','3') DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `path` (`path`)
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;


DROP TABLE IF EXISTS `zz_messages`;
CREATE TABLE `zz_messages` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `content` mediumtext NOT NULL,
  `media_id` int unsigned DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `user_id` int unsigned NOT NULL,
  `discussion_id` int unsigned NOT NULL,
  `message_id` int unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_m_user` (`user_id`),
  KEY `fk_m_discussion` (`discussion_id`),
  KEY `fk_m_message` (`message_id`),
  KEY `fk_m_images` (`media_id`),
  CONSTRAINT `fk_m_discussion` FOREIGN KEY (`discussion_id`) REFERENCES `zz_discussions` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `fk_m_images` FOREIGN KEY (`media_id`) REFERENCES `zz_medias` (`id`) ON UPDATE RESTRICT,
  CONSTRAINT `fk_m_message` FOREIGN KEY (`message_id`) REFERENCES `zz_messages` (`id`) ON UPDATE RESTRICT,
  CONSTRAINT `fk_m_user` FOREIGN KEY (`user_id`) REFERENCES `zz_users` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;



DROP TABLE IF EXISTS `zz_users_discussions`;
CREATE TABLE `zz_users_discussions` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` int unsigned NOT NULL,
  `discussion_id` int unsigned NOT NULL,
  `status` int NOT NULL,
  `lastdate` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`discussion_id`),
  KEY `fk_ud_discussion` (`discussion_id`),
  CONSTRAINT `fk_ud_discussion` FOREIGN KEY (`discussion_id`) REFERENCES `zz_discussions` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `fk_ud_user` FOREIGN KEY (`user_id`) REFERENCES `zz_users` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;


DROP TABLE IF EXISTS `zz_users_langages`;
CREATE TABLE `zz_users_langages` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` int unsigned NOT NULL,
  `langage_id` int unsigned NOT NULL,
  `type` int unsigned NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`langage_id`,`type`),
  KEY `fk_ul_langage` (`langage_id`),
  CONSTRAINT `fk_ul_langage` FOREIGN KEY (`langage_id`) REFERENCES `zz_langages` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `fk_ul_user` FOREIGN KEY (`user_id`) REFERENCES `zz_users` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;


DROP TABLE IF EXISTS `zz_users_medias`;
CREATE TABLE `zz_users_medias` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` int unsigned NOT NULL,
  `media_id` int unsigned NOT NULL,
  `principal` int unsigned DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`media_id`),
  KEY `fk_um_medias` (`media_id`),
  CONSTRAINT `fk_um_medias` FOREIGN KEY (`media_id`) REFERENCES `zz_medias` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `fk_um_users` FOREIGN KEY (`user_id`) REFERENCES `zz_users` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;


-- 2024-06-11 19:51:13




------------------------------------

Voici mon fichier fichier models.py. En effet, j'ai créé une application commondatab pour centraliser mes modèles de telles sortes que 
pour utiliser un modèle dans une application je fais import commondatab.models. J'avais créé manuellement ma base de données, j'ai fait un
inspectdb puis après j'ai apporté les changements que je voulais: 

from django.db import models
# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.

from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin

class ZzUsersManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError('The Email field must be set')
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)

        if extra_fields.get('is_staff') is not True:
            raise ValueError('Superuser must have is_staff=True.')
        if extra_fields.get('is_superuser') is not True:
            raise ValueError('Superuser must have is_superuser=True.')

        return self.create_user(email, password, **extra_fields)

class ZzUsers(AbstractBaseUser, PermissionsMixin):
    email = models.CharField(unique=True, max_length=255)
    password = models.CharField(max_length=255)
    pseudo = models.CharField(unique=True, max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    last_login = models.DateTimeField(auto_now_add=True)
    nom = models.CharField(max_length=255, blank=True, null=True)
    prenom = models.CharField(max_length=255, blank=True, null=True)
    birthday = models.DateField(auto_now_add=True)
    bio = models.TextField(blank=True, null=True)
    sex = models.CharField(max_length=22, blank=True, null=True)
    plage = models.CharField(max_length=2, blank=True, null=True)
    astre = models.CharField(max_length=10, blank=True, null=True)
    religion = models.CharField(max_length=10, blank=True, null=True)
    longitude = models.FloatField(default=6.321)
    latitude = models.FloatField(default=2.981)
    city = models.CharField(max_length=255)
    country = models.CharField(max_length=255)
    hobby = models.JSONField(blank=True, null=True)
    pref = models.JSONField(blank=True, null=True)
    online = models.BooleanField(blank=True, null=True)
    is_superuser=models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)
    objects = ZzUsersManager()
    
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['pseudo']

    class Meta:
        db_table = 'zz_users'

class ZzFriendship(models.Model):
    liker = models.ForeignKey('ZzUsers', models.CASCADE, db_column='liker', related_name='zzfriendship_liker_set')
    liked = models.ForeignKey('ZzUsers', models.CASCADE, db_column='liked', related_name='zzfriendship_liked_set')
    lik = models.PositiveIntegerField()

    class Meta:
        
        db_table = 'zz_friendship'
        unique_together = (('liker', 'liked', 'lik'),)

class ZzDiscussions(models.Model):
    room_name = models.CharField(unique=True, max_length=255, null=True)
    last_message_id = models.PositiveIntegerField(blank=True, null=True)

    class Meta:
        
        db_table = 'zz_discussions'

class ZzLangages(models.Model):
    name = models.CharField(max_length=255)

    class Meta:
        
        db_table = 'zz_langages'

class ZzHobbys(models.Model):
    name = models.CharField(max_length=255)

    class Meta:
        
        db_table = 'zz_hobbys'

class ZzMedias(models.Model):
    path = models.CharField(unique=True, max_length=255)
    type = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        
        db_table = 'zz_medias'

class ZzMessages(models.Model):
    content = models.TextField()
    media = models.ForeignKey(ZzMedias, models.SET_NULL, blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True, blank=True, null=True)#blank=True, null=True
    user = models.ForeignKey('ZzUsers', models.CASCADE)
    discussion = models.ForeignKey(ZzDiscussions, models.CASCADE)
    message = models.ForeignKey('self', models.CASCADE)

    class Meta:
        db_table = 'zz_messages'

class ZzUsersDiscussions(models.Model):
    user = models.ForeignKey(ZzUsers, models.CASCADE)
    discussion = models.ForeignKey(ZzDiscussions, models.CASCADE)
    status = models.IntegerField()
    lastdate = models.DateTimeField(blank=True, null=True)

    class Meta:
        
        db_table = 'zz_users_discussions'
        unique_together = (('user', 'discussion'),)

class ZzUsersLangages(models.Model):
    user = models.ForeignKey(ZzUsers, models.CASCADE)
    langage = models.ForeignKey(ZzLangages, models.CASCADE)
    type = models.PositiveIntegerField()

    class Meta:
        
        db_table = 'zz_users_langages'
        unique_together = (('user', 'langage', 'type'),)

class ZzUsersMedias(models.Model):
    user = models.ForeignKey(ZzUsers, models.CASCADE)
    media = models.ForeignKey(ZzMedias, models.CASCADE)
    principal = models.PositiveIntegerField(blank=True, null=True)

    class Meta:
        
        db_table = 'zz_users_medias'
        unique_together = (('user', 'media'),)
----------------------------------------------------------

Le fichier models.py de mon appli 'messagerie':

from commondatab.models import ZzDiscussions, ZzFriendship, ZzMessages, ZzUsersDiscussions, ZzMedias, ZzUsers, ZzUsersManager
from django.db import models

class Messages(ZzMessages):
    def __str__(self) -> str:
        return f'{self.user.username}-{self.discussion}' if self.user else f'{self.content}-{self.discussion}'




------------------------------------------------------

Voici mon fichier routing.py:
from channels.routing import ProtocolTypeRouter, URLRouter
from django.urls import path
from .consumers import *
from messagerie.consumers import MessagerieConsumer


websocket_urlpatterns = [
    path("ws/messagerie/", MessagerieConsumer.as_asgi()),
]
------------------------------------

Voici mon fichier signals.py
from django.db.models.signals import post_save
from django.dispatch import receiver
from commondatab.models import *
from django.db.models import Q

@receiver(post_save, sender=ZzFriendship)
def create_discussion_on_mutual_like(sender, instance, created, **kwargs):
    if created: 
        liker = instance.liker
        liked = instance.liked
        if ZzFriendship.objects.filter(liker=liked, liked=liker, lik=1).exists():
            room_name = (
                f'{liker.id}_{liked.id}' if liker.id > liked.id else f'{liked.id}_{liker.id}'
            )

    ZzDiscussions.objects.get_or_create(room_name=room_name)


----------------------------------------------

Voici mon fichier views.py:
from django.shortcuts import render
from django.http import HttpResponse
def messagerie(request):
    return render(request, 'messagerie/messagerie.html')
    #----------------------------------------------------API Endpoints---------------------------------------------------




from rest_framework import viewsets, status
from rest_framework.response import Response
from commondatab.models import ZzFriendship, ZzUsers
from django.contrib.auth import get_user_model
import requests



class LikeViewSet(viewsets.ViewSet):
    def create(self, request, *args, **kwargs):
        liker = request.user
        liked_id = request.data.get('liked_id')
        liked = get_user_model().objects.get(id=liked_id)
        
        
        ZzFriendship.objects.create(liker=liker, liked=liked, lik=1)
        return Response(status=status.HTTP_201_CREATED)

Voici mon fichier consumers.py:
import json
from channels.db import DatabaseSyncToAsync
from channels.generic.websocket import AsyncWebsocketConsumer
from messagerie.models import Messages
from commondatab.models import *
from django.contrib.auth import get_user_model
import rest_framework.authentication
class MessagerieConsumer(AsyncWebsocketConsumer):
    
    async def connect(self):
            
        if self.scope["user"].is_authenticated:
            current_user_id = self.scope['user'].id if self.scope['user'].is_authenticated else int(self.scope['query_string'])
            other_user_id = self.scope['url_route']['kwargs']['id']
            self.room_name = (
                f'{current_user_id}_{other_user_id}'
                if int(current_user_id) > int(other_user_id)
                else f'{other_user_id}_{current_user_id}'
            ) 
            
            self.room_group_name = f'chat_{self.room_name}'
            await self.channel_layer.group_add(self.room_group_name, self.channel_name)
            await self.accept()
            # await self.send(text_data=self.room_group_name)
        else:
            await self.close()
    async def disconnect(self, close_code):
        await self.channel_layer.group_discard(self.room_group_name, self.channel_name)
        #await self.disconnect(close_code)
    async def receive(self, text_data=None, bytes_data=None):
        data = json.loads(text_data)
        content = data['content']
        user_username = data['userUsername'].replace('"', '')
        user = await self.get_user(user_username)#.replace('"', ''))
        #discussion = await self.get_or_create_discussion(user.id, other_user_id)
        await self.save_message(user=user, content=content, discussion=self.room_name)

        messages = await self.get_messages(self.room_name) 
    
        # Envoyer le message au serveur Django
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type' : 'messagerie_message',
                'content': content,
                'userUsername': user_username,
                'messages': messages,
            },
        )

    async def messagerie_message(self, event):
        content = event['content']
        username = event['userUsername']
        messages = event['messages']
        
        
        await self.send( 
            text_data=json.dumps(
                {
                    'content': content,
                    'userUsername': username,
                    'messages': messages,
                }
            )
        )
        
        @DatabaseSyncToAsync
        def get_user(self, username):
            return get_user_model().objects.filter(username=username).first()
        
        @DatabaseSyncToAsync
        def get_messages(self, room_name):
            #custom_serializers = CustomSerializer()
            messages = Messages.objects.select_related().filter(discussion__room_name=self.room_name).values(
                    'user__pk',
                    'user__username',
                    'content',
                    'discussion__room_name',
                    'created_at',
            )
            return messages
        
        @DatabaseSyncToAsync
        def save_message(self, user, content, discussion):
            discussion_obj, created = ZzDiscussions.objects.get_or_create(room_name=discussion)
            Messages.objects.create(user=user, content=content, discussion=discussion_obj)


Je remarque que la table ZzUsersDiscussions n'est pas utilisée et ça me créé des problèmes. En voulant démarrer mon server, j'ai eu l'erreur suivante:
(.venv) PS C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11> python manage.py migrate --fake-initial
Operations to perform:
  Apply all migrations: admin, auth, commondatab, contenttypes, messagerie, sessions
Running migrations:
  Applying messagerie.0001_initial...Traceback (most recent call last):
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\db\backends\utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\db\backends\mysql\base.py", line 76, in execute
    return self.cursor.execute(query, args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\MySQLdb\connections.py", line 261, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (3780, "Referencing column 'zzmessages_ptr_id' and referenced column 'id' in foreign key constraint 'messagerie_messages_zzmessages_ptr_id_e6e4e7ef_fk_zz_messages_id' are incompatible.")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\manage.py", line 22, in <module>
    main()
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\core\management\__init__.py", line 442, in execute_from_command_line
    utility.execute()
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\core\management\__init__.py", line 436, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\core\management\base.py", line 413, in run_from_argv
    self.execute(*args, **cmd_options)
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\core\management\base.py", line 459, in execute
    output = self.handle(*args, **options)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\core\management\base.py", line 107, in wrapper
    res = handle_func(*args, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\core\management\commands\migrate.py", line 356, in handle
    post_migrate_state = executor.migrate(
                         ^^^^^^^^^^^^^^^^^
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\db\migrations\executor.py", line 135, in migrate
    state = self._migrate_all_forwards(
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\db\migrations\executor.py", line 167, in _migrate_all_forwards
    state = self.apply_migration(
            ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\db\migrations\executor.py", line 249, in apply_migration
    with self.connection.schema_editor(
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\db\backends\base\schema.py", line 167, in __exit__
    self.execute(sql)
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\db\backends\base\schema.py", line 202, in execute
    cursor.execute(sql, params)
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\db\backends\utils.py", line 122, in execute
    return super().execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\db\backends\utils.py", line 79, in execute
    return self._execute_with_wrappers(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\db\backends\utils.py", line 92, in _execute_with_wrappers
    return executor(sql, params, many, context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\db\backends\utils.py", line 100, in _execute
    with self.db.wrap_database_errors:
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\db\utils.py", line 91, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\db\backends\utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\django\db\backends\mysql\base.py", line 76, in execute  
    return self.cursor.execute(query, args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\Livingstone GBOZO\Documents\Actualités\Projetprojet\PIL1_2324_11\.venv\Lib\site-packages\MySQLdb\connections.py", line 261, in query
    _mysql.connection.query(self, query)
django.db.utils.OperationalError: (3780, "Referencing column 'zzmessages_ptr_id' and referenced column 'id' in foreign key constraint 'messagerie_messages_zzmessages_ptr_id_e6e4e7ef_fk_zz_messages_id' are incompatible.")


Voilà mon fichier models.py de mon application 'messagerie'. Les autres modèles que je t'ai 
envoyé sont des modèles du fichier models.py de mon appli commondatab (en effet cette appli, je l'ai créé pour pouvoir 
centraliser les modèles de ma base de données, et donc si j'ai besoin des modèles dans une appli, je fais un from 
commondatab.models import ........ ). Je suis en train d'établir la messagerie instantanée avec les WenSockets, Django Channels, 
daphne et redis. Je pense que mon fichier consumer.py n'est pas en accord avec mes modèles. Parceque ça ne prend pas en compte 
ZzUsersDiscussions et aussi peut être une autre raison. Voici la logique de mon appli de messagerie. 
Quand un utilisateur like un autre, et que ce dernier le like en retour, ça créé une discussion. 
C'est exactement comme le principe de Facebook où quand j'envoie une invitation à un utilisateur (dans mon appli quand je le like), il voit dans sa liste d'invitation mon invitation. Quand il accepte (ici il me like en retour), une discussion se 
créé automatiquement entre nous, et dans la partie discussion, je peux le voir pour l'écrire, lui de même. 


Je veux que tu voie les erreurs et les corrige ou refais carrément toutes les configs de fond en comble de façon détaillée, en te basant sur la description de la logique de discussion
 en utilisant mes modèles ZzUsers, ZzDiscussions, ZzFriendship, ZzUsersDiscussions, ZzMessages. Je ne veux plus avoir l'erreur. Merci beaucoup !!